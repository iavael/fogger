<page xmlns="http://projectmallard.org/1.0/"
      type="topic"
      id="Web API">

<info>
  <link type="guide" xref="index#contents"/>
  <credit type="author">
    <name>Owais Lone</name>
    <email>hello@owaislone.org</email>
    <years>2012</years>
  </credit>
  <desc>Fogger Web API</desc>
</info>

<title>Web API</title>
<p>Fogger exposes a special JavaScript API to webapps. This API exposes some of the functions of the host desktop environment to the web app running inside fogger.</p>

<note><p>
The current JS API is very much experimental. This is more of a proof-of-concept implementation and as a result only a few desktop functions are exposed. A proper implementation will follow in the coming versions.
</p></note>
<media type="image" mime="image/jpg" src="figures/webapi/example.jpeg">[webapi-example]</media>

<p>
The image above shows how a website can export menus to the desktop and have a callback function called upon activation just like a regular desktop app.
</p>

<section id="js-api">
    <title>JavaScript API</title>
    <note><p>This is just a preliminary proof-of-concept API. Expect changes and breakage.</p></note>
    <section id="js-initialization">
        <title>JavaScript initialization</title>
        <p>Fogger emits a DOM Event when the API has finished initialization and is ready to be used. Your JS code should wait for this event before attempting to use the API.</p>
        <p>Example</p>
        <code>
    // Check if fogger JS API is present
    if (window['fogger']) {

        // Initialize here

    } else {
        // If the fogger API is not present, wait for the 'foggerReady' 
        // and initialize once it is ready

        document.addEventListener('foggerReady', function() {
            // Initialize here

            // Create a new object from the Fogger class
            var desktop = new fogger.Fogger();

            // Create a new menu
            var my_reddits_menu = desktop.newMenu('My Reddits');

            // Add an item to the menu
            my_reddits_menu.addItem({
                    name: 'Ubuntu',
                    callback: function(menu, item) {
                        alert('Item ' + item + ' from menu ' + menu + ' was clicked');
                    };
                });
        });
    }
        </code>
        <note>
            <p>Currently, the JS might fire the events or inject a userscript multitple times while the page loads. This will be fixed soon. Fogger API takes care of duplicate API calls, you can safely export the same menu multitple times without worrying about duplication or JS object polution.</p>
            <p> If you really don't want to have your code execute more than once, you can do something like this to avoid it</p>
<code>
if (window['__myCodeInitialized'] === undefined) {
        // Initialize here
        window.__myCodeInitialized = true;
};
</code>
        <p>All these tiny quirks will be fixed once the JS API is finalized and fogger comes out of the experimental stage.</p>
        </note>
    </section>
    <section>
        <title>Available Classes</title>
        <list>
        <title>Classes</title>
        <item><p><link type="section" xref="Web API#docs-classes-Fogger">Fogger</link></p></item>
        <item><p><link type="section" xref="Web API#docs-classes-Menu">Menu</link></p></item>
        <item><p><link type="section" xref="Web API#docs-classes-MenuItem">Menu Item</link></p></item>
        <item><p><link type="section" xref="Web API#docs-classes-Quicklist">Quicklist</link></p></item>
        <item><p><link type="section" xref="Web API#docs-classes-QuicklistItem">QuicklistItem</link></p></item>
        </list>
    </section>
    <section>
        <title>Class Documentation</title>
        <section id="docs-classes-Fogger">
            <title>Foggger</title>
            <p>This is the main fogger class. You can access all the API functions from an instance of this class.</p>
            <section>
                <list>
                <title>Methods</title>
                    <item>
                        <title>notify(summary, body)</title>
                        <media type="image" mime="image/jpg" src="figures/webapi/example-notification.jpeg">[webapi-example]</media>
                        <p>Used to send a desktop notification.</p>
                        <steps>
                            <item>
                                <title>summary</title>
                                <p>The summary or title of the notification</p>
                            </item>
                            <item>
                                <title>body</title>
                                <p>The body of the notification</p>
                            </item>
                        </steps>
                    </item>
                    <item>
                        <title>setProgress(progress)</title>
                        <media type="image" mime="image/jpg" src="figures/webapi/progress-example.jpeg">[webapi-example]</media>
                        <p>Sets the progress level on the launcher entry progress bar.</p>
                        <steps>
                            <item>
                                <title>progress</title>
                                <p>A number between 0 and 1 where 0.5 means 50%.</p>
                            </item>
                        </steps>
                    </item>

                    <item>
                        <title>setProgressVisible(visible)</title>
                        <p>Shows or hides the progress on the launcher entry.</p>
                        <steps>
                            <item>
                                <title>visible</title>
                                <p><code>true</code> or <code>false</code></p>
                            </item>
                        </steps>
                    </item>

                    <item>
                        <title>setCount(count)</title>
                        <media type="image" mime="image/jpg" src="figures/webapi/count-example.jpeg">[webapi-example]</media>
                        <p>Sets a number as a badge on the launcher entry.</p>
                        <steps>
                            <item>
                                <title>count</title>
                                <p>Any valid number.</p>
                            </item>
                        </steps>
                    </item>

                    <item>
                        <title>setCountVisible(visible)</title>
                        <p>Shows or hides the launcher entry count badge.</p>
                        <steps>
                            <item>
                                <title>visible</title>
                                <p><code>true</code> or <code>false</code></p>
                            </item>
                        </steps>
                    </item>

                    <item>
                        <title>setUrgent(urgent)</title>
                        <media type="image" mime="image/jpg" src="figures/webapi/example-urgent.jpeg">[webapi-example]</media>
                        <p>Changes to launcher entry state to urgent, trying to grab user's attention.</p>
                        <steps>
                            <item>
                                <title>urgent</title>
                                <p><code>true</code> or <code>false</code></p>
                            </item>
                        </steps>
                    </item>

                    <item>
                        <title>newMenu(name)</title>
                        <media type="image" mime="image/jpg" src="figures/webapi/example.jpeg">[webapi-example]</media>
                        <p>Returns a newly created <link type="section" xref="Web API#docs-classes-Menu">menu</link>. The menu becomes visible when you add menu items to it.</p>
                        <steps>
                            <item>
                                <title>name</title>
                                <p>A string containing the name of the menu. An underscore (_) in the name represents a mnemonic key. For example, '_My Reddit' will set 'alt+m' as the keyboard shortcut for the menu.</p>
                            </item>
                        </steps>
                    </item>
                </list>

                <list>
                <title>Properties</title>
                    <item>
                        <title>quicklist</title>
                        <media type="image" mime="image/jpg" src="figures/webapi/example-quicklist.jpeg">[webapi-example]</media>
                        <p>A reference to the launcher entry <link type="section" xref="Web API#docs-classes-Quicklist">quicklist</link>.</p>
                    </item>
                </list>
            </section>

        <section id="docs-classes-Menu">
            <title>Menu</title>
            <p>This class implements the Menu object.</p>
            <list>
                <title>Methods</title>

                <item>
                    <title>addItem(item)</title>
                    <p>Returns a newly created <link type="section" xref="Web API#docs-classes-MenuItem">menu item</link> and makes the menu visible if it is hidden.</p>
                    <steps>
                        <item>
                            <title>item</title>
                            <p>An object with the <code>name</code> and <code>callback</code> properties.</p>
                            <p>Example</p>
                            <code>
{
    name: 'My menu entry',
    callback: function(menu, item) {
        // This is called when the item is clicked
        // menu refers to the parent menu
        // item refers to the menu item that was clicked.
        };
}
</code>
                        </item>
                    </steps>
                </item>

                <item>
                    <title>removeItem(item)</title>
                    <steps>
                        <item>
                            <title>item</title>
                            <p>A <link type="section" xref="Web API#docs-classes-MenuItem">menuItem</link> instance or a similar object as the one used in the <code>addItem</code> method.</p>
                        </item>
                    </steps>
                </item>

                <item>
                    <title>remove()</title>
                    <p>Removes the menu and all of it's child items.</p>
                </item>
            </list>
        </section>

        <section id="docs-classes-MenuItem">
            <title>Menu Item</title>
            <list>
                <title>Properties</title>
                <item>
                    <title>callback</title>
                    <p>A function that is called everytime the menu item is clicked.</p>
                </item>
            </list>
        </section>

        <section id="docs-classes-Quicklist">
            <title>Quicklist</title>

            <note>
            <p>You should not create new instances from this class. <code>Fogger</code> class already contains an instance as a property so you should use that instead</p>
            <p>Example</p>
            <code>
var desktop = new fogger.Fogger();
desktop.quicklist.addItem(...);
            </code>
            </note>
            <list>
                <title>Methods</title>

                <item>
                    <title>addItem(item)</title>
                    <p>Returns a newly created <link type="section" xref="Web API#docs-classes-QuicklistItem">quicklist item</link>.</p>
                    <steps>
                        <item>
                            <title>item</title>
                            <p>An object with the <code>name</code> and <code>callback</code> properties.</p>
                            <p>Example</p>
                            <code>
{
    name: 'My quicklist entry',
    callback: function(item) {
        // This is called when the item is clicked
        // item refers to the quicklist item that was clicked.
        };
}
</code>
                        </item>
                    </steps>
                </item>

                <item>
                    <title>removeItem(item)</title>
                    <steps>
                        <item>
                            <title>item</title>
                            <p>A <link type="section" xref="Web API#docs-classes-QuicklistItem">quicklistItem</link> instance or a similar object as the one used in the <code>addItem</code> method.</p>
                        </item>
                    </steps>
                </item>
            </list>
        </section>

        <section id="docs-classes-QuicklistItem">
            <title>Quicklist Item</title>
            <list>
                <title>Properties</title>
                <item>
                    <title>callback</title>
                    <p>A function that is called every time the menu item is clicked.</p>
                </item>
            </list>
        </section>
        </section>
    </section>
</section>
</page>
